@page "/events/new"
@inject NavigationManager Nav
@inject ContaJunsta.Services.DataService Data

<main class="page-root">
    <header class="page-header">
        <h1 class="page-title">NOVO EVENTO</h1>
    </header>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="error-box">@error</div>
    }

    <section class="page-card">
        <div class="field">
            <label>Nome do evento</label>
            <input class="input" @bind="name" placeholder="Ex.: Viagem Búzios 2025" />
            @if (string.IsNullOrWhiteSpace(name))
            {
                <small class="hint">Obrigatório.</small>
            }
        </div>

        <div class="field">
            <label>Participantes</label>
            <div class="add-row">
                <input class="input" @bind="participantInput" placeholder="Nome do participante" />
                <button type="button" class="home-btn" @onclick="AddParticipant">Adicionar</button>
            </div>

            <div class="participants-box">
                @if (participants.Count == 0)
                {
                    <small class="muted">Nenhum participante adicionado ainda. Adicione pelo menos 2.</small>
                }
                else
                {
                    <ul class="plist">
                        @foreach (var p in participants)
                        {
                            <li>
                                <span>@p</span>
                                <button type="button" class="icon" title="Remover" @onclick="() => RemoveParticipant(p)">×</button>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>

        <div class="actions">
            <button class="home-btn" @onclick="SaveAsync" disabled="@(!CanSave)">Salvar</button>
            <button class="home-btn ghost" @onclick="Cancel">Voltar</button>
        </div>
    </section>
</main>

@code {
    string name = "";
    List<string> participants = new();
    string participantInput = "";
    string error = "";

    bool CanSave => !string.IsNullOrWhiteSpace(name) && participants.Count >= 2;

    void AddParticipant()
    {
        error = "";
        var n = (participantInput ?? "").Trim();
        if (string.IsNullOrWhiteSpace(n)) return;
        if (participants.Any(x => string.Equals(x, n, StringComparison.OrdinalIgnoreCase))) return;

        participants.Add(n);
        participantInput = "";
    }

    void RemoveParticipant(string n)
    {
        error = "";
        participants.Remove(n);
    }

    void Cancel()
    {
        error = "";
        name = "";
        participants.Clear();
        participantInput = "";
        Nav.NavigateTo("/");
    }

    async Task SaveAsync()
    {
        try
        {
            error = "";
            if (!CanSave) { error = "Preencha o nome e adicione pelo menos 2 participantes."; return; }

            // cria evento + pessoas e navega para a página do evento
            var id = await Data.CreateEventAsync(name.Trim(), participants);
            Nav.NavigateTo($"/events/{id}");
        }
        catch (Exception ex)
        {
            error = "Não foi possível criar o evento. " + ex.Message;
            Console.Error.WriteLine(ex);
        }
    }
}
